version: '3.9'

# Common Django template for GeoNode and Celery services below
x-common-django:
  &default-common-django
  image: us-south1-docker.pkg.dev/waterwizard/geonode/geonode:4.0
  restart: on-failure
  env_file:
    - .env
  volumes:
    - type: bind
      source: ${SHARED_VOLUMES}/statics
      target: /mnt/volumes/statics
    - type: bind
      source: ${SHARED_VOLUMES}/geoserver_data/data
      target: /geoserver_data/data
    - type: bind
      source: ${SHARED_VOLUMES}/backup_restore
      target: /backup_restore
    - type: bind
      source: ${SHARED_VOLUMES}/data
      target: /data
    - type: bind
      source: ${SHARED_VOLUMES}/tmp
      target: /tmp
  depends_on:
    db:
      condition: service_started
    geoserver:
      condition: service_healthy

services:

  # Our custom django application. It includes Geonode.
  django:
    << : *default-common-django
    container_name: django4${COMPOSE_PROJECT_NAME}
    healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8001/"
      start_period: 60s
      interval: 60s
      timeout: 10s
      retries: 10
    environment:
      - IS_CELERY=False
    entrypoint: ["/usr/src/geonode/entrypoint.sh"]
    command: "uwsgi --ini /usr/src/geonode/uwsgi.ini"

  # Celery worker that executes celery tasks created by Django.
  celery:
    << : *default-common-django
    image: us-south1-docker.pkg.dev/waterwizard/geonode/geonode:latest
    container_name: celery4${COMPOSE_PROJECT_NAME}
    depends_on:
      - django
    environment:
      - IS_CELERY=True
    entrypoint: ["/usr/src/geonode/entrypoint.sh"]
    command: "celery-cmd"

  # Nginx is serving django static and media files and proxies to django and geonode
  geonode:
    image: us-south1-docker.pkg.dev/waterwizard/geonode/nginx:latest
    container_name: nginx4${COMPOSE_PROJECT_NAME}
    environment:
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTP_HOST=${HTTP_HOST}
      - HTTPS_PORT=${HTTPS_PORT}
      - HTTP_PORT=${HTTP_PORT}
      - LETSENCRYPT_MODE=${LETSENCRYPT_MODE}
      - RESOLVER=127.0.0.11
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    volumes:
      - nginx-confd:/etc/nginx
      - type: bind
        source: ${SHARED_VOLUMES}/nginxcerts
        target: /geonode-certificates
      - type: bind
        source: ${SHARED_VOLUMES}/statics
        target: /mnt/volumes/statics
    restart: on-failure

  # Gets and installs letsencrypt certificates
  letsencrypt:
    image: us-south1-docker.pkg.dev/waterwizard/geonode/letsencrypt:latest
    container_name: letsencrypt4${COMPOSE_PROJECT_NAME}
    environment:
      - HTTPS_HOST=${HTTPS_HOST}
      - HTTP_HOST=${HTTP_HOST}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - LETSENCRYPT_MODE=${LETSENCRYPT_MODE}
    volumes:
      - type: bind
        source: ${SHARED_VOLUMES}/nginxcerts
        target: /geonode-certificates
    restart: on-failure

  # Geoserver backend
  geoserver:
    image: geonode/geoserver:2.20.6
    container_name: geoserver4${COMPOSE_PROJECT_NAME}
    healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8080/geoserver/rest/workspaces/geonode.html"
      start_period: 60s
      interval: 60s
      timeout: 10s
      retries: 10
    env_file:
      - .env
    volumes:
      - type: bind
        source: ${SHARED_VOLUMES}/statics
        target: /mnt/volumes/statics
      - type: bind
        source: ${SHARED_VOLUMES}/geoserver_data/data
        target: /geoserver_data/data
      - type: bind
        source: ${SHARED_VOLUMES}/backup_restore
        target: /backup_restore
      - type: bind
        source: ${SHARED_VOLUMES}/data
        target: /data
      - type: bind
        source: ${SHARED_VOLUMES}/tmp
        target: /tmp
    restart: on-failure
    depends_on:
      db:
        condition: service_started

  db:
    container_name: db4${COMPOSE_PROJECT_NAME}
    image: gcr.io/cloudsql-docker/gce-proxy
    command: /cloud_sql_proxy --dir=/cloudsql -instances=${PROJECT_ID}:${REGION}:${INSTANCE}=tcp:0.0.0.0:5432 -credential_file=/secrets/cloudsql/credentials.json
    volumes:
      - ${CLOUDSQL_CREDENTIALS}:/secrets/cloudsql/credentials.json
    restart: always

  # Vanilla RabbitMQ service. This is needed by celery
  rabbitmq:
    image: rabbitmq:3.7-alpine
    container_name: rabbitmq4${COMPOSE_PROJECT_NAME}
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    restart: on-failure

volumes:
  nginx-confd:
    name: ${COMPOSE_PROJECT_NAME}-nginxconfd
  rabbitmq:
    name: ${COMPOSE_PROJECT_NAME}-rabbitmq