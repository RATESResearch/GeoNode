Extending GeoNodeGCP for REON.cc
================================

:term:`GeoNodeGCP` is a stock implementation of :term:`GeoNode` on :term:`GCP`. :term:`REONode` is a live implementation of :term:`REON.cc` extensions and applications under active development. :term:`REONode` is available online at <http://reonode.water-wizard.org>.

1. The environment variables file from :term:`GeoNodeGCP` is adapted to reflect the specifics of :term:`REONode`.

#. The :term:`K8S` manifests are adapted for :term:`REONode`:

    a. **namespace.yaml**: Define the reonode namespace.
    #. **managed-certficates.yaml**: SSL Certificate definition.
    #. **pv.yaml**: Persistent Volume definition, referring to the Google Filestore share.
    #. **pvc.yaml**: Persistent Volume Claim, used by the containers to mount the filestore share.
    #. **deployment.yaml**: Deploy the reonode containers
    #. **service.yaml**: 
    #. **ingress.yaml**:

#. Create reonode namespace:

.. code::

    kubectl apply -f /data/REONode/src/reonode/namespace.yaml

Verify creation of namespace:

.. code::

    kubectl get namespaces

#. Add the cluster and context to the local kube.config. We

.. code::

    gcloud container clusters get-credentials waterwizard --region us-south1

#. List the contexts:

.. code::

    kubectl config get-contexts

#. Rename the new context:

.. code::

    kubectl config rename-context gke_waterwizard_us-south1_waterwizard reonode

#. Add namespace to the new reonode context

.. code::

    kubectl config set-context reonode --namespace reonode


#. List the contexts to verify addition of the namespace:

.. code::

    kubectl config get-contexts

#. Use the reonode context

.. code::

    kubectl config use-context reonode    

#. Create cloudsql-oauth-credentials (`Running Django on the Google Kubernetes Engine` <https://cloud.google.com/python/django/kubernetes-engine>`)

.. code::

    kubectl create secret generic cloudsql-oauth-credentials --from-file=credentials.json=$HOME/.ssh/waterwizard-cloudsql.json --namespace reonode


#. Create database secrets:

    kubectl create secret generic reonode-secrets --from-env-file /data/REONode/src/reonode/.env

#. Create the database (reonode and reonode_data) along with the users with the passwords provided in .env

#. Create the volumes folder to store data shared between containers:
    
.. code::

    SHARED_VOLUMES=/data/REONode/volumes
    sudo rm -rf ${SHARED_VOLUMES}
    mkdir -p ${SHARED_VOLUMES}/statics/
    mkdir -p ${SHARED_VOLUMES}/geoserver_data/data    
    mkdir -p ${SHARED_VOLUMES}/nginxcerts/
    mkdir -p ${SHARED_VOLUMES}/dbdata/
    mkdir -p ${SHARED_VOLUMES}/tmp/
    mkdir -p ${SHARED_VOLUMES}/dbbackups/
    mkdir -p ${SHARED_VOLUMES}/backup_restore/
    mkdir -p ${SHARED_VOLUMES}/data/
    mkdir -p ${SHARED_VOLUMES}/statics/

    GEOSERVER_VERSION=2.20.6
    TEMP_DOWNLOADED=${SHARED_VOLUMES}/tmp/geonode/downloaded
    ARTIFACT_URL="https://artifacts.geonode.org/geoserver/$GEOSERVER_VERSION/geonode-geoserver-ext-web-app-data.zip"
    BASE_GEOSERVER_DATA_DIR=${SHARED_VOLUMES}/geoserver_data
    mkdir -p $TEMP_DOWNLOADED
    curl  -k -L "$ARTIFACT_URL" --output data.zip && unzip -x -d ${TEMP_DOWNLOADED} data.zip
    rm data.zip
    mkdir -p ${BASE_GEOSERVER_DATA_DIR}
    cp -r ${TEMP_DOWNLOADED}/data ${BASE_GEOSERVER_DATA_DIR}

#. Create the Google managed SSL certificate:

.. code::

    kubectl apply -f /data/REONode/src/reonode/managed-certificates.yaml

#. Create the Kubernetes Persistent Volume for /data 

.. code::

    kubectl apply -f /data/REONode/src/reonode/pv.yaml

#. Create the Kubernetes Persistent Volume Claim for /data 

.. code::

    kubectl apply -f /data/REONode/src/reonode/pvc.yaml

#. Deploy the containers:

.. code::

    kubectl apply -f /data/REONode/src/reonode/deployment.yaml
